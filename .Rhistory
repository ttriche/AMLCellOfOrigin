theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
sample_representation <- summary(nmf5, group_by = colnames(aml), stat = "mean")
plot(sample_representation) +
scale_fill_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
theme(aspect.ratio = 1)
sample_representation <- summary(nmf5, group_by = colnames(aml), stat = "mean")
plot(sample_representation) +
scale_fill_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
theme(aspect.ratio = 1)
aml_representation <- subset(sample_representation, group == "AML sample")
aml_min <- which.min(aml_representation$stat)
aml_max <- which.max(aml_representation$stat)
biplot(nmf5, factors = c(aml_min, aml_max), matrix = "h", group_by = colnames(aml)) +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
set.seed(123)
plot_umap(nmf5[-aml_min], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
clusters <- cluster_nmf(nmf5[-aml_min], aml, resolution = 0.1)
colnames(nmf5@h) <- paste0("cluster", clusters)
plot_umap(nmf5[-aml_min], n_neighbors = 10, metric = "cosine")
cv <- crossValidate(aml, 2:15, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous(limits = c(0.02, 0.03)) +
stat_smooth(se = F, color = "black")
nmf10 <- nmf(aml, k = 10, seed = 123)
plot(summary(nmf10, group_by = colnames(aml), stat = "mean")) +
scale_fill_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00")) +
theme(aspect.ratio = 1)
set.seed(123)
plot_umap(nmf10[c(1, 7, 10)], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
A <- list(
aml[, which(colnames(aml) == "AML sample")],
aml[, which(colnames(aml) != "AML sample")]
)
str(A)
cv <- crossValidate(A[[1]], 1:10, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous() +
stat_smooth(se = F, color = "black")
cv <- crossValidate(A[[1]], 1:15, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous() +
stat_smooth(se = F, color = "black")
cv <- crossValidate(A[[1]], 2:10, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous() +
stat_smooth(se = F, color = "black")
cv <- crossValidate(A[[1]], 2:12, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous() +
stat_smooth(se = F, color = "black")
min(cv$value)
cv <- crossValidate(A[[1]], 2:12, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous(limits = c(0.02, 0.03)) +
stat_smooth(se = F, color = "black")
cv <- crossValidate(A[[1]], 2:12, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous(limits = c(0.022, 0.035)) +
stat_smooth(se = F, color = "black")
cv <- crossValidate(A[[2]], 2:12, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous() +
stat_smooth(se = F, color = "black")
cv <- crossValidate(A[[2]], 2:10, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous() +
stat_smooth(se = F, color = "black")
cv <- crossValidate(A[[1]], 2:15, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous(limits = c(0.022, 0.035)) +
stat_smooth(se = F, color = "black")
min(cv$value)
max(cv$value)
cv <- crossValidate(A[[2]], 2:10, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous(limits = c(0.024, 0.035)) +
stat_smooth(se = F, color = "black")
min(cv$value)
plot(sort(cv$value))
abline(h = 0.01)
abline(h = 0.005)
cv <- crossValidate(A[[2]], 2:10, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous(limits = c(0.001, 0.005)) +
stat_smooth(se = F, color = "black")
cv <- crossValidate(A[[2]], 2:10, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous(limits = c(0.001, 0.005)) +
stat_smooth(se = F, color = "black")
lnmf_model <- lnmf(A, k_wh = 3, k_uv = c(4, 3), seed = 123)
str(A)
data <- A
k_wh <- 3
k_uv <- c(4, 3)
tol
tol <- 1e-4
maxit <- 100
L1 <- c(0, 0)
L2 <- L1
nonneg <- TRUE
seed <- 123
mask <- NULL
if (length(k_uv) != length(data)) stop("number of ranks specified in 'k_uv' must equal the length of the list of datasets in 'data'")
if (length(data) == 1) stop("only one dataset was provided, linked NMF is only useful for multiple datasets")
# define initial "h", the linking matrix
set_pointers <- c(sapply(data, function(x) ncol(x)))
for (i in 2:length(set_pointers))
set_pointers[i] <- set_pointers[i] + set_pointers[i - 1]
set_pointers <- c(1, set_pointers)
k_pointers <- c(k_wh, k_uv)
for (i in 2:length(k_pointers))
k_pointers[i] <- k_pointers[i] + k_pointers[i - 1]
n_samples <- sum(sapply(data, function(x) ncol(x)))
link_matrix <- matrix(0, sum(k_wh, k_uv), n_samples)
link_matrix[1:k_wh, 1:n_samples] <- 1
for (i in 1:length(k_uv))
link_matrix[(k_pointers[i] + 1):k_pointers[i + 1], (set_pointers[i] + 1):set_pointers[i + 1]] <- 1
# combine data into a single matrix
if (!all(sapply(data, function(x) class(x)) == class(data[[1]]))) stop("'data' contains items of different classes")
if (!all(sapply(data, function(x) nrow(x)) == nrow(data[[1]]))) stop("'data' contains items with different numbers of rows")
data <- do.call(cbind, data)
# combine all mask matrices into a single matrix and check dimensions against "A"
if (!is.null(mask)) {
if (is.list(mask)) {
if (length(mask) != length(k_uv)) stop("'mask' was a list, but not of the same length as 'data' and 'k_uv'")
if (class(mask)[[1]] == "character") {
if (!all(sapply(mask, function(x) x == mask[[1]]))) stop("'mask' was a list of characters, but not all items were equal. Since datasets are factorized jointly, only one type of masking may be specified.")
mask <- mask[[1]]
} else {
if (!all(sapply(mask, function(x) class(x)) == class(mask[[1]]))) stop("'mask' contains items of different classes")
if (!all(sapply(mask, function(x) nrow(x)) == nrow(mask[[1]]))) stop("'mask' contains items with different numbers of rows")
mask <- do.call(cbind, mask)
if (!all(dim(mask) == dim(data))) stop("dimensions of all 'mask' and 'data' items are not equivalent")
}
}
}
model <- nmf(data, nrow(link_matrix), tol, maxit, L1, L2, nonneg, seed, mask, link_h = TRUE, h_init = link_matrix, sort_model = FALSE)
model
str(model)
diag_order_wh <- order(model@d[1:k_wh], decreasing = TRUE)
w <- model@w[, diag_order_wh]
model@h <- model@h[diag_order_wh, ]
rownames(model@h) <- paste0("h", 1:nrow(model@h))
colnames(w) <- paste0("w", 1:ncol(w))
u <- v <- h <- d_wh <- d_uv <- list()
for (i in 1:length(k_uv)) {
u[[i]] <- model@w[, (k_pointers[i] + 1):k_pointers[i + 1]]
d_uv[[i]] <- model@d[(k_pointers[i] + 1):k_pointers[i+1]]
diag_order_uv <- order(d_uv[[i]], decreasing = TRUE)
d_uv[[i]] <- d_uv[[i]][diag_order_uv]
v[[i]] <- model@h[diag_order_uv, (set_pointers[i] + 1):set_pointers[i + 1]]
h[[i]] <- model@h[1:k_wh, (set_pointers[i] + 1):set_pointers[i + 1]]
d_wh[[i]] <- model@d[diag_order_wh]
scale_h <- rowSums(h[[i]])
h[[i]] <- apply(h[[i]], 2, function(x) x / scale_h)
d_wh[[i]] <- d_wh[[i]] * scale_h
names(d_wh[[i]]) <- NULL
colnames(u[[i]]) <- paste0("u", i, ".", 1:ncol(u[[i]]))
rownames(v[[i]]) <- paste0("v", i, ".", 1:nrow(v[[i]]))
rownames(u[[i]]) <- rownames(w)
colnames(v[[i]]) <- colnames(h[[i]])
}
i
diag_order_uv
length(d_uv)
str(d_uv)
set_pointers[i] + 1
set_pointers
set_pointers[i + 1]
set_pointers[i] + 1
1:k_wh
str(model@h)
set_pointers
link_matrix[,1:10]
if (length(k_uv) != length(data)) stop("number of ranks specified in 'k_uv' must equal the length of the list of datasets in 'data'")
if (length(data) == 1) stop("only one dataset was provided, linked NMF is only useful for multiple datasets")
# define initial "h", the linking matrix
set_pointers <- c(sapply(data, function(x) ncol(x)))
for (i in 2:length(set_pointers))
set_pointers[i] <- set_pointers[i] + set_pointers[i - 1]
set_pointers <- c(0, set_pointers)
k_pointers <- c(k_wh, k_uv)
for (i in 2:length(k_pointers))
k_pointers[i] <- k_pointers[i] + k_pointers[i - 1]
n_samples <- sum(sapply(data, function(x) ncol(x)))
link_matrix <- matrix(0, sum(k_wh, k_uv), n_samples)
link_matrix[1:k_wh, 1:n_samples] <- 1
for (i in 1:length(k_uv))
link_matrix[(k_pointers[i] + 1):k_pointers[i + 1], (set_pointers[i] + 1):set_pointers[i + 1]] <- 1
# combine data into a single matrix
if (!all(sapply(data, function(x) class(x)) == class(data[[1]]))) stop("'data' contains items of different classes")
if (!all(sapply(data, function(x) nrow(x)) == nrow(data[[1]]))) stop("'data' contains items with different numbers of rows")
data <- do.call(cbind, data)
# combine all mask matrices into a single matrix and check dimensions against "A"
if (!is.null(mask)) {
if (is.list(mask)) {
if (length(mask) != length(k_uv)) stop("'mask' was a list, but not of the same length as 'data' and 'k_uv'")
if (class(mask)[[1]] == "character") {
if (!all(sapply(mask, function(x) x == mask[[1]]))) stop("'mask' was a list of characters, but not all items were equal. Since datasets are factorized jointly, only one type of masking may be specified.")
mask <- mask[[1]]
} else {
if (!all(sapply(mask, function(x) class(x)) == class(mask[[1]]))) stop("'mask' contains items of different classes")
if (!all(sapply(mask, function(x) nrow(x)) == nrow(mask[[1]]))) stop("'mask' contains items with different numbers of rows")
mask <- do.call(cbind, mask)
if (!all(dim(mask) == dim(data))) stop("dimensions of all 'mask' and 'data' items are not equivalent")
}
}
}
model <- nmf(data, nrow(link_matrix), tol, maxit, L1, L2, nonneg, seed, mask, link_h = TRUE, h_init = link_matrix, sort_model = FALSE)
diag_order_wh <- order(model@d[1:k_wh], decreasing = TRUE)
w <- model@w[, diag_order_wh]
model@h <- model@h[diag_order_wh, ]
rownames(model@h) <- paste0("h", 1:nrow(model@h))
colnames(w) <- paste0("w", 1:ncol(w))
u <- v <- h <- d_wh <- d_uv <- list()
for (i in 1:length(k_uv)) {
u[[i]] <- model@w[, (k_pointers[i] + 1):k_pointers[i + 1]]
d_uv[[i]] <- model@d[(k_pointers[i] + 1):k_pointers[i+1]]
diag_order_uv <- order(d_uv[[i]], decreasing = TRUE)
d_uv[[i]] <- d_uv[[i]][diag_order_uv]
v[[i]] <- model@h[diag_order_uv, (set_pointers[i] + 1):set_pointers[i + 1]]
h[[i]] <- model@h[ , (set_pointers[i] + 1):set_pointers[i + 1]]
d_wh[[i]] <- model@d[diag_order_wh]
scale_h <- rowSums(h[[i]])
h[[i]] <- apply(h[[i]], 2, function(x) x / scale_h)
d_wh[[i]] <- d_wh[[i]] * scale_h
names(d_wh[[i]]) <- NULL
colnames(u[[i]]) <- paste0("u", i, ".", 1:ncol(u[[i]]))
rownames(v[[i]]) <- paste0("v", i, ".", 1:nrow(v[[i]]))
rownames(u[[i]]) <- rownames(w)
colnames(v[[i]]) <- colnames(h[[i]])
}
if (length(k_uv) != length(data)) stop("number of ranks specified in 'k_uv' must equal the length of the list of datasets in 'data'")
if (length(data) == 1) stop("only one dataset was provided, linked NMF is only useful for multiple datasets")
# define initial "h", the linking matrix
set_pointers <- c(sapply(data, function(x) ncol(x)))
for (i in 2:length(set_pointers))
set_pointers[i] <- set_pointers[i] + set_pointers[i - 1]
set_pointers <- c(0, set_pointers)
data <- A
k_uv
k_wh
if (length(k_uv) != length(data)) stop("number of ranks specified in 'k_uv' must equal the length of the list of datasets in 'data'")
if (length(data) == 1) stop("only one dataset was provided, linked NMF is only useful for multiple datasets")
# define initial "h", the linking matrix
set_pointers <- c(sapply(data, function(x) ncol(x)))
for (i in 2:length(set_pointers))
set_pointers[i] <- set_pointers[i] + set_pointers[i - 1]
set_pointers <- c(0, set_pointers)
k_pointers <- c(k_wh, k_uv)
for (i in 2:length(k_pointers))
k_pointers[i] <- k_pointers[i] + k_pointers[i - 1]
n_samples <- sum(sapply(data, function(x) ncol(x)))
link_matrix <- matrix(0, sum(k_wh, k_uv), n_samples)
link_matrix[1:k_wh, 1:n_samples] <- 1
set_pointers
for (i in 1:length(k_uv))
link_matrix[(k_pointers[i] + 1):k_pointers[i + 1], (set_pointers[i] + 1):set_pointers[i + 1]] <- 1
link_matrix[,1:10]
link_matrix[,120:ncol(link_matrix)]
link_matrix[,124:ncol(link_matrix)]
# combine data into a single matrix
if (!all(sapply(data, function(x) class(x)) == class(data[[1]]))) stop("'data' contains items of different classes")
if (!all(sapply(data, function(x) nrow(x)) == nrow(data[[1]]))) stop("'data' contains items with different numbers of rows")
data <- do.call(cbind, data)
# combine all mask matrices into a single matrix and check dimensions against "A"
if (!is.null(mask)) {
if (is.list(mask)) {
if (length(mask) != length(k_uv)) stop("'mask' was a list, but not of the same length as 'data' and 'k_uv'")
if (class(mask)[[1]] == "character") {
if (!all(sapply(mask, function(x) x == mask[[1]]))) stop("'mask' was a list of characters, but not all items were equal. Since datasets are factorized jointly, only one type of masking may be specified.")
mask <- mask[[1]]
} else {
if (!all(sapply(mask, function(x) class(x)) == class(mask[[1]]))) stop("'mask' contains items of different classes")
if (!all(sapply(mask, function(x) nrow(x)) == nrow(mask[[1]]))) stop("'mask' contains items with different numbers of rows")
mask <- do.call(cbind, mask)
if (!all(dim(mask) == dim(data))) stop("dimensions of all 'mask' and 'data' items are not equivalent")
}
}
}
model <- nmf(data, nrow(link_matrix), tol, maxit, L1, L2, nonneg, seed, mask, link_h = TRUE, h_init = link_matrix, sort_model = FALSE)
str(model)
diag_order_wh <- order(model@d[1:k_wh], decreasing = TRUE)
w <- model@w[, diag_order_wh]
model@h <- model@h[diag_order_wh, ]
rownames(model@h) <- paste0("h", 1:nrow(model@h))
colnames(w) <- paste0("w", 1:ncol(w))
u <- v <- h <- d_wh <- d_uv <- list()
for (i in 1:length(k_uv)) {
u[[i]] <- model@w[, (k_pointers[i] + 1):k_pointers[i + 1]]
d_uv[[i]] <- model@d[(k_pointers[i] + 1):k_pointers[i+1]]
diag_order_uv <- order(d_uv[[i]], decreasing = TRUE)
d_uv[[i]] <- d_uv[[i]][diag_order_uv]
v[[i]] <- model@h[diag_order_uv, (set_pointers[i] + 1):set_pointers[i + 1]]
h[[i]] <- model@h[ , (set_pointers[i] + 1):set_pointers[i + 1]]
d_wh[[i]] <- model@d[diag_order_wh]
scale_h <- rowSums(h[[i]])
h[[i]] <- apply(h[[i]], 2, function(x) x / scale_h)
d_wh[[i]] <- d_wh[[i]] * scale_h
names(d_wh[[i]]) <- NULL
colnames(u[[i]]) <- paste0("u", i, ".", 1:ncol(u[[i]]))
rownames(v[[i]]) <- paste0("v", i, ".", 1:nrow(v[[i]]))
rownames(u[[i]]) <- rownames(w)
colnames(v[[i]]) <- colnames(h[[i]])
}
dim(model@h)
diag_order_uv
u <- v <- h <- d_wh <- d_uv <- list()
for (i in 1:length(k_uv)) {
u[[i]] <- model@w[, (k_pointers[i] + 1):k_pointers[i + 1]]
d_uv[[i]] <- model@d[(k_pointers[i] + 1):k_pointers[i+1]]
diag_order_uv <- order(d_uv[[i]], decreasing = TRUE)
d_uv[[i]] <- d_uv[[i]][diag_order_uv]
v[[i]] <- model@h[ , (set_pointers[i] + 1):set_pointers[i + 1]]
h[[i]] <- model@h[ , (set_pointers[i] + 1):set_pointers[i + 1]]
d_wh[[i]] <- model@d[diag_order_wh]
scale_h <- rowSums(h[[i]])
h[[i]] <- apply(h[[i]], 2, function(x) x / scale_h)
d_wh[[i]] <- d_wh[[i]] * scale_h
names(d_wh[[i]]) <- NULL
colnames(u[[i]]) <- paste0("u", i, ".", 1:ncol(u[[i]]))
rownames(v[[i]]) <- paste0("v", i, ".", 1:nrow(v[[i]]))
rownames(u[[i]]) <- rownames(w)
colnames(v[[i]]) <- colnames(h[[i]])
}
getwd()
model <- nmf(data, nrow(link_matrix), tol, maxit, L1, L2, nonneg, seed, mask, link_h = TRUE, h_init = link_matrix, sort_model = FALSE)
diag_order_wh <- order(model@d[1:k_wh], decreasing = TRUE)
w <- model@w[, diag_order_wh]
model@h <- model@h[diag_order_wh, ]
rownames(model@h) <- paste0("h", 1:nrow(model@h))
colnames(w) <- paste0("w", 1:ncol(w))
u <- v <- h <- d_wh <- d_uv <- list()
for (i in 1:length(k_uv)) {
u[[i]] <- model@w[, (k_pointers[i] + 1):k_pointers[i + 1]]
d_uv[[i]] <- model@d[(k_pointers[i] + 1):k_pointers[i+1]]
diag_order_uv <- order(d_uv[[i]], decreasing = TRUE)
d_uv[[i]] <- d_uv[[i]][diag_order_uv]
v[[i]] <- model@h[ (k_pointers[i] + 1):k_pointers[i+1], (set_pointers[i] + 1):set_pointers[i + 1]]
h[[i]] <- model@h[ , (set_pointers[i] + 1):set_pointers[i + 1]]
d_wh[[i]] <- model@d[diag_order_wh]
scale_h <- rowSums(h[[i]])
h[[i]] <- apply(h[[i]], 2, function(x) x / scale_h)
d_wh[[i]] <- d_wh[[i]] * scale_h
names(d_wh[[i]]) <- NULL
colnames(u[[i]]) <- paste0("u", i, ".", 1:ncol(u[[i]]))
rownames(v[[i]]) <- paste0("v", i, ".", 1:nrow(v[[i]]))
rownames(u[[i]]) <- rownames(w)
colnames(v[[i]]) <- colnames(h[[i]])
}
model <- nmf(data, nrow(link_matrix), tol, maxit, L1, L2, nonneg, seed, mask, link_h = TRUE, h_init = link_matrix, sort_model = FALSE)
diag_order_wh <- order(model@d[1:k_wh], decreasing = TRUE)
w <- model@w[, diag_order_wh]
rownames(model@h) <- paste0("h", 1:nrow(model@h))
colnames(w) <- paste0("w", 1:ncol(w))
u <- v <- h <- d_wh <- d_uv <- list()
for (i in 1:length(k_uv)) {
u[[i]] <- model@w[, (k_pointers[i] + 1):k_pointers[i + 1]]
d_uv[[i]] <- model@d[(k_pointers[i] + 1):k_pointers[i+1]]
diag_order_uv <- order(d_uv[[i]], decreasing = TRUE)
d_uv[[i]] <- d_uv[[i]][diag_order_uv]
v[[i]] <- model@h[ (k_pointers[i] + 1):k_pointers[i+1], (set_pointers[i] + 1):set_pointers[i + 1]]
v[[i]] <- v[[i]][diag_order_uv, ]
h[[i]] <- model@h[ , (set_pointers[i] + 1):set_pointers[i + 1]]
h[[i]] <- h[[i]][diag_order_wh, ]
d_wh[[i]] <- model@d[diag_order_wh]
scale_h <- rowSums(h[[i]])
h[[i]] <- apply(h[[i]], 2, function(x) x / scale_h)
d_wh[[i]] <- d_wh[[i]] * scale_h
names(d_wh[[i]]) <- NULL
colnames(u[[i]]) <- paste0("u", i, ".", 1:ncol(u[[i]]))
rownames(v[[i]]) <- paste0("v", i, ".", 1:nrow(v[[i]]))
rownames(u[[i]]) <- rownames(w)
colnames(v[[i]]) <- colnames(h[[i]])
}
str(h)
str(v)
str(u)
str(w)
d_wh
d_uv
devtools::install_github("zdebruine/RcppML")
lnmf_model <- lnmf(A, k_wh = 3, k_uv = c(4, 3), seed = 123)
A <- list(
aml[, which(colnames(aml) == "AML sample")],
aml[, which(colnames(aml) != "AML sample")]
)
library(RcppML)
A <- list(
aml[, which(colnames(aml) == "AML sample")],
aml[, which(colnames(aml) != "AML sample")]
)
cv <- crossValidate(aml, 2:15, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous(limits = c(0.02, 0.03)) +
stat_smooth(se = F, color = "black")
library(ggplot2)
cv <- crossValidate(aml, 2:15, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous(limits = c(0.02, 0.03)) +
stat_smooth(se = F, color = "black")
# devtools::install_github("zdebruine/AMLCellOfOrigin")
library(AMLCellOfOrigin)
library(RcppML)
library(ggplot2)
library(cowplot)
library(uwot)
data(aml)
str(aml)
cv <- crossValidate(A[[2]], 2:10, seed = 123, reps = 5)
plot(cv) +
theme(aspect.ratio = 1) + scale_y_continuous(limits = c(0.001, 0.005)) +
stat_smooth(se = F, color = "black")
library(RcppML)
lnmf_model <- lnmf(A, k_wh = 3, k_uv = c(4, 3), seed = 123)
devtools::install_github("zdebruine/RcppML")
lnmf_model
# devtools::install_github("zdebruine/AMLCellOfOrigin")
library(AMLCellOfOrigin)
library(RcppML)
library(ggplot2)
library(cowplot)
library(uwot)
data(aml)
str(aml)
A <- list(
aml[, which(colnames(aml) == "AML sample")],
aml[, which(colnames(aml) != "AML sample")]
)
lnmf_model <- lnmf(A, k_wh = 3, k_uv = c(4, 3), seed = 123)
lnmf_model
nmf_model <- as(lnmf_model, "nmf")
nmf_model <- as(lnmf_model, "nmf")
plot(summary(nmf_model, group_by = colnames(aml), stat = "mean")) +
scale_fill_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00")) +
theme(aspect.ratio = 1)
nmf_model <- as(lnmf_model, "nmf")
plot(summary(nmf_model, group_by = colnames(aml), stat = "sum")) +
scale_fill_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00")) +
theme(aspect.ratio = 1)
nmf_model <- as(lnmf_model, "nmf")
plot(summary(nmf_model, group_by = colnames(aml), stat = "mean")) +
scale_fill_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00")) +
theme(aspect.ratio = 1)
set.seed(123)
plot_umap(do.call(cbind, lnmf_model@h), n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
h <- do.call(cbind, lnmf_model@h)
dim(h)
set.seed(123)
plot_umap(do.call(cbind, lnmf_model@h), n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
head(h)
set.seed(123)
plot_umap(nmf_model@h[1:3, ], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
set.seed(123)
plot_umap(nmf_model@h[1:3], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
set.seed(123)
plot_umap(nmf_model[1:3], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
set.seed(123)
lnmf_model <- lnmf(A, k_wh = 3, k_uv = c(3, 2), seed = 123)
plot_umap(nmf_model[1:3], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
set.seed(123)
nmf_model <- as(lnmf(A, k_wh = 3, k_uv = c(3, 2), seed = 123), "nmf")
plot_umap(nmf_model[1:3], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
set.seed(123)
nmf_model <- as(lnmf(A, k_wh = 3, k_uv = c(2, 2), seed = 123), "nmf")
plot_umap(nmf_model[1:3], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
set.seed(123)
nmf_model <- as(lnmf(A, k_wh = 3, k_uv = c(2, 1), seed = 123), "nmf")
set.seed(123)
nmf_model <- as(lnmf(A, k_wh = 3, k_uv = c(2, 2), seed = 123), "nmf")
plot_umap(nmf_model[1:3], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
set.seed(123)
nmf_model <- as(lnmf(A, k_wh = 4, k_uv = c(2, 2), seed = 123), "nmf")
plot_umap(nmf_model[1:3], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
set.seed(123)
nmf_model <- as(lnmf(A, k_wh = 4, k_uv = c(2, 3), seed = 123), "nmf")
plot_umap(nmf_model[1:3], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
set.seed(123)
nmf_model <- as(lnmf(A, k_wh = 4, k_uv = c(2, 2), seed = 123), "nmf")
plot_umap(nmf_model[1:3], n_neighbors = 10, metric = "cosine") +
theme(aspect.ratio = 1) +
scale_color_manual(values = c("gray", "#F8766D", "#C77CFF", "#7CAE00"))
str(nmf_model)
rownames(nmf_model@h)
